package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// Generated represents generated.
type Generated struct {
	ColumnName string `json:"column_name"` // column_name
}

// PostgresTableGenerations returns generated column names.
func PostgresTableGenerations(ctx context.Context, db DB, schema, table string) ([]*Generated, error) {
	// query
	const sqlstr = `SELECT ` +
		`a.attname ` + // ::varchar as column_name
		`FROM pg_class s ` +
		`JOIN pg_depend d ON d.objid = s.oid ` +
		`JOIN pg_class t ON d.objid = s.oid AND d.refobjid = t.oid ` +
		`JOIN pg_attribute a ON (d.refobjid, d.refobjsubid) = (a.attrelid, a.attnum) ` +
		`JOIN pg_namespace n ON n.oid = s.relnamespace ` +
		`WHERE s.relkind = 'S' ` +
		`AND n.nspname = $1 ` +
		`AND t.relname = $2`
	// run
	logf(sqlstr, schema, table)
	rows, err := db.QueryContext(ctx, sqlstr, schema, table)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// load results
	var res []*Generated
	for rows.Next() {
		var s Generated
		// scan
		if err := rows.Scan(&s.ColumnName); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &s)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}
